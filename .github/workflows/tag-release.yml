name: Create Release Tag

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

jobs:
  create-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Calculate new version
        id: new_version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            CURRENT_VERSION="${{ steps.current_version.outputs.CURRENT_VERSION }}"
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case $VERSION_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"
      
      - name: Run tests
        run: |
          xvfb-run -a yarn test
        env:
          DISPLAY: ':99.0'
      
      - name: Update package.json version
        run: |
          npm version ${{ steps.new_version.outputs.NEW_VERSION }} --no-git-tag-version
      
      - name: Test package creation
        run: |
          npm install -g @vscode/vsce
          vsce package --no-dependencies
      
      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.NEW_VERSION }}"
          git push origin main
      
      - name: Create and push tag
        run: |
          git tag "v${{ steps.new_version.outputs.NEW_VERSION }}"
          git push origin "v${{ steps.new_version.outputs.NEW_VERSION }}"
          
      - name: Summary
        run: |
          echo "âœ… Successfully created tag v${{ steps.new_version.outputs.NEW_VERSION }}"
          echo "ðŸš€ Release workflow will now be triggered automatically"
